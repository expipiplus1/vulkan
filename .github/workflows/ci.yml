name: CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  cabal:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        ghc: ['9.0', '8.10', '8.8']
        os: [ubuntu-20.04, macOS-latest, windows-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: haskell/actions/setup@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}

    - uses: actions/cache@v2
      with:
        path: |
          ${{ steps.setup-haskell-cabal.outputs.cabal-store }}
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ghc }}-

    - name: Install system dependencies Linux
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install libvulkan-dev glslang-tools libsdl2-dev

    - name: Install system dependencies macOS
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        brew install pkg-config sdl2
        brew tap apenngrace/homebrew-vulkan
        brew install --cask vulkan-sdk --verbose ||
          brew install --cask vulkan-sdk --verbose ||
          brew install --cask vulkan-sdk --verbose

    - name: Install system dependencies Windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        choco install pkgconfiglite

        curl -L https://www.libsdl.org/release/SDL2-devel-2.0.12-mingw.tar.gz | tar xz
        SDL2=$(cygpath --windows --absolute "SDL2-2.0.12/x86_64-w64-mingw32")
        printf "%s\n" "$SDL2/bin" >> "$GITHUB_PATH"
        printf "%s\n" "PKG_CONFIG_PATH=$SDL2/lib/pkgconfig" >> "$GITHUB_ENV"

        choco install vulkan-sdk
        VulkanSDK=$(cygpath --windows --absolute /c/VulkanSDK/*/)
        printf "%s\n" "$VulkanSDK/Bin" >> "$GITHUB_PATH"
        curl -L https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-runtime-components.zip?u= > vulkan-runtime-components.zip
        unzip vulkan-runtime-components.zip
        printf "%s\n" "$(cygpath --windows --absolute VulkanRT-*/x64)" >> "$GITHUB_PATH"

        cat >> cabal.project <<EOF
        package sdl2
          extra-lib-dirs: $SDL2/lib/
          extra-include-dirs: $SDL2/include/SDL2/

        package vulkan
          extra-lib-dirs: $VulkanSDK/Lib/

        package vulkan-utils
          extra-include-dirs: $VulkanSDK/Include/

        package VulkanMemoryAllocator
          extra-include-dirs: $VulkanSDK/Include/
        EOF

    - name: Remove openxr
      run: |
        sed -ibak '/openxr/d' cabal.project

    - name: Remove generator for all but 8.10 and 9.0
      run: |
        sed -ibak '/generate-new/d' cabal.project
      if: matrix.ghc != '8.10' || matrix.ghc != '9.0'

    - run: cabal update

    - run: |
        if command -v glslc &> /dev/null; then
          cabal configure -fgeneric-instances -f-raytracing -fhave-shaderc
        else
          echo "glslc could not be found"
          cabal configure -fgeneric-instances -f-raytracing -f-have-shaderc
        fi
      shell: bash

    - name: Install dependencies
      run: cabal build --only-dependencies --enable-tests --enable-benchmarks all

    - name: Build vulkan
      run: cabal build --enable-tests --enable-benchmarks vulkan

    - name: Build VulkanMemoryAllocator
      run: cabal build --enable-tests --enable-benchmarks VulkanMemoryAllocator

    - name: Build vulkan-utils
      run: cabal build --enable-tests --enable-benchmarks vulkan-utils

    - name: Build vulkan-examples
      run: cabal build --enable-tests --enable-benchmarks vulkan-examples

    - run: cabal check

    - name: Build documentation
      run: |
        cabal haddock
        cabal haddock VulkanMemoryAllocator
        cabal haddock vulkan-utils

  stack:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-20.04, macOS-latest, windows-latest]
        stack-args: ['--flag vulkan:generic-instances --flag VulkanMemoryAllocator:generic-instances --flag vulkan-examples:-raytracing --flag vulkan-examples:-have-shaderc --system-ghc']
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: haskell/actions/setup@v1
      with:
        stack-version: 'latest'
        enable-stack: true
        ghc-version: '8.10'

    - name: Cache stack things
      uses: actions/cache@v2
      with:
        path: |
          ~/.stack
          .stack-work
        key: ${{ runner.os }}-stack-global-${{ matrix.stack-args }}-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-stack-global-${{ matrix.stack-args }}
          ${{ runner.os }}-stack-global

    - name: Install system dependencies Linux
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install libvulkan-dev glslang-tools libsdl2-dev

    - name: Install system dependencies Windows
      if: matrix.os == 'windows-latest'
      shell: bash
      run: |
        choco install pkgconfiglite

        curl -L https://www.libsdl.org/release/SDL2-devel-2.0.12-mingw.tar.gz | tar xz
        SDL2=$(cygpath --windows --absolute "SDL2-2.0.12/x86_64-w64-mingw32")
        printf "%s\n" "$SDL2/bin" >> "$GITHUB_PATH"
        printf "%s\n" "PKG_CONFIG_PATH=$SDL2/lib/pkgconfig" >> "$GITHUB_ENV"

        choco install vulkan-sdk
        VulkanSDK=$(cygpath --windows --absolute /c/VulkanSDK/*/)
        printf "%s\n" "$VulkanSDK/Bin" >> "$GITHUB_PATH"
        curl -L https://sdk.lunarg.com/sdk/download/latest/windows/vulkan-runtime-components.zip?u= > vulkan-runtime-components.zip
        unzip vulkan-runtime-components.zip
        printf "%s\n" "$(cygpath --windows --absolute VulkanRT-*/x64)" >> "$GITHUB_PATH"

        cat >> stack.yaml <<EOF
        extra-lib-dirs:
          - $SDL2/lib/
          - $VulkanSDK/Lib/
        extra-include-dirs:
          - $SDL2/include/SDL2/
          - $VulkanSDK/Include/
        EOF

    - name: Install system dependencies macOS
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        brew install pkg-config sdl2
        brew tap apenngrace/homebrew-vulkan --verbose
        brew install --cask vulkan-sdk --verbose ||
          brew install --cask vulkan-sdk --verbose ||
          brew install --cask vulkan-sdk --verbose

    - name: Remove openxr
      run: |
        sed -ibak '/openxr/d' stack.yaml

    - name: Install dependencies
      run: stack build $ARGS --test --bench --only-dependencies
      env:
        ARGS: ${{ matrix.stack-args }}

    - name: Build
      run: stack build $ARGS
      env:
        ARGS: ${{ matrix.stack-args }}

    - name: Build documentation
      run: stack haddock $ARGS
      env:
        ARGS: ${{ matrix.stack-args }}

  nix:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        ghc: ['null', '"ghc901"']
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v10
      with:
        name: vulkan-haskell
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

    - run: nix-build --arg compiler '${{ matrix.ghc }}' -A vulkan
    - run: nix-build --arg compiler '${{ matrix.ghc }}' -A VulkanMemoryAllocator
    - run: nix-build --arg compiler '${{ matrix.ghc }}' -A vulkan-utils
    - run: nix-build --arg compiler '${{ matrix.ghc }}' -A openxr
    - run: nix-build --arg compiler '${{ matrix.ghc }}' ./nix/haskell-packages.nix --arg openxrNoVulkan true -A openxr
    - run: nix-build --arg compiler '${{ matrix.ghc }}' -A vulkan-examples
    - run: nix-build --arg compiler '${{ matrix.ghc }}' nix/release.nix
    - run: nix-build --arg compiler '${{ matrix.ghc }}' nix/release.nix -A docs
    - run: nix-build --arg compiler '${{ matrix.ghc }}' nix/release.nix -A docs-combined
    - run: XDG_DATA_DIRS=$(mktemp -d) nix-shell --arg compiler '${{ matrix.ghc }}' examples --run 'ghc-pkg list'

  nix-sdist:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v10
      with:
        name: vulkan-haskell
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

    - run: nix-build nix/release.nix -A sdistTest

  nix-generator:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v10
      with:
        name: vulkan-haskell
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

    - run: nix-build -A generate-new

  nix-shell-profiling:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - uses: cachix/install-nix-action@v16
      with:
        nix_path: nixpkgs=channel:nixos-unstable
    - uses: cachix/cachix-action@v10
      with:
        name: vulkan-haskell
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

    - run: XDG_DATA_DIRS=$(mktemp -d) nix-shell examples --arg buildProfiling true --run 'ghc-pkg list'

  shellcheck:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Install shellcheck
      run: |
        sudo apt-get install fd-find
    - name: Check scripts with shellcheck
      run: |
        fdfind .sh$ . \
          --exclude VulkanMemoryAllocator/VulkanMemoryAllocator \
          --exclude generate-new/Vulkan-Docs \
          --exclude generate-new/OpenXR-Docs \
          --exec shellcheck
